#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled1:server');
var http = require('http');
var io = require('socket.io');
let linebot = require('linebot');
/**
 * Get port from environment and store in Express.
 */



let server = app.listen(process.env.PORT || 8080, function () {
    let port = server.address().port;
    app.set('port', port);
    console.log("My Line bot App running on port", port);
});
//我的LINE
let bot = linebot({
    channelId: '1522300741',
    channelSecret: '455f74dac591d18ede2d996eb202f440',
    channelAccessToken:'PMYTOjEFFN7ZnBSMDdKUmtgkjod7Xkukm4g2LNyFGB7q6FsPFym2zhiUsN7GWbb5DkJEV1nPsOqmvZ81MaUTUdokXu0pxd/ZM9Vt5nxGdghJkveeo2MfWR7mhY6EuSfMv94qG6rZmkDPLn2Cz+ik1QdB04t89/1O/w1cDnyilFU='
});

bot.on('message', function (event) {
    // 把收到訊息的 event 印出來
    var msg = "groupId:" + event.source.groupId + "  userId:" + event.source.userId + " text:" + event.message.text;

    console.log("收到:"+ msg);      // your JSON
    if (event.message.type = 'text') {
        var msg = event.message.text;
        event.reply(msg).then(function(data) {
            // success
            console.log(msg);
        }).catch(function(error) {
            // error
            console.log('error');
        });
    }
    if (event.message.text === 'now') {
        event.reply(msg).then(function(data) {
            // success.
            //ps4(1);
            //baha(1);
            console.log(msg);
        }).catch(function(error) {
            // error
            console.log('error');
        });
    }


    console.log(msg);
});






/**
 * Create HTTP server.
 */
/*var port = normalizePort(process.env.PORT || '3000');
var server = http.createServer(app);
server.listen(port);*/
/**
 * Listen on provided port, on all network interfaces.
 */


server.on('error', onError);
server.on('listening', onListening);


let serv_io = io.listen(server);
serv_io.sockets.on('connection', function(socket) {
    console.log('test');
    // 傳送時間訊息給瀏覽器
    setInterval(function() {
        socket.emit('date', {'date': new Date()});
    }, 1000);
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
